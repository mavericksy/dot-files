!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-	nvim/init.vim	/^noremap - dd k P$/;"	m
/	nvim/init.vim	/^nnoremap \/ \/\\v$/;"	m
/	nvim/init.vim	/^vnoremap \/ \/\\v$/;"	m
;	nvim/init.vim	/^nnoremap ; :$/;"	m
<C-I>	nvim/init.vim	/^nmap <C-I> :bprev<CR>$/;"	m
<C-O>	nvim/init.vim	/^nmap <C-O> :bnext<CR>$/;"	m
<C-h>	nvim/init.vim	/^noremap <C-h> <C-w>h$/;"	m
<C-j>	nvim/init.vim	/^noremap <C-j> <C-w>j$/;"	m
<C-k>	nvim/init.vim	/^noremap <C-k> <C-w>k$/;"	m
<C-l>	nvim/init.vim	/^noremap <C-l> <C-w>l$/;"	m
<C-p>	nvim/init.vim	/^nnoremap <C-p> :FZF<CR>$/;"	m
<F1>	nvim/init.vim	/^noremap! <F1> <Esc>$/;"	m
<F4>	nvim/init.vim	/^nnoremap <F4> :GundoToggle<CR>$/;"	m
<F7>	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^map <F7> :UltiSnipsEdit<CR>$/;"	m	language:Vim
<Leader>pC	nvim/init.vim	/^nmap <Leader>pC :call phpactor#ClassNew()<CR>$/;"	m
<Leader>pE	nvim/init.vim	/^vmap <silent><Leader>pE :<C-U>call phpactor#ExtractMethod()<CR>$/;"	m
<Leader>pG	nvim/init.vim	/^nmap <Leader>pG :call phpactor#GotoDefinition()<CR>$/;"	m
<Leader>pM	nvim/init.vim	/^nmap <Leader>pM :call phpactor#ContextMenu()<CR>$/;"	m
<Leader>pN	nvim/init.vim	/^nmap <Leader>pN :call phpactor#Navigate()<CR>$/;"	m
<Leader>pT	nvim/init.vim	/^nmap <Leader>pT :call phpactor#Transform()<CR>$/;"	m
<Leader>pU	nvim/init.vim	/^nmap <Leader>pU :call phpactor#UseAdd()<CR>$/;"	m
<Leader>q	nvim/init.vim	/^nnoremap <Leader>q :Bdelete<CR>$/;"	m
<Leader>sx	nvim/init.vim	/^nnoremap <Leader>sx :SrcExplToggle<CR>$/;"	m
<Leader>v	nvim/init.vim	/^nnoremap <silent> <Leader>v :NERDTreeFind<CR>$/;"	m
<Space><Space><Space>	nvim/vimrc/mappings.vim	/^nnoremap <Space><Space><Space> :Rg<space>$/;"	m
<c-u>	nvim/init.vim	/^inoremap <c-u> <esc>viwUi$/;"	m
<c-u>	nvim/init.vim	/^nnoremap <c-u> viwU$/;"	m
<down>	nvim/init.vim	/^noremap <down> <nop>$/;"	m
<esc>	nvim/init.vim	/^inoremap <esc> <nop>$/;"	m
<leader>;	nvim/init.vim	/^nnoremap <leader>; ;$/;"	m
<leader><space>	nvim/init.vim	/^nnoremap <leader><space> :noh<cr>$/;"	m
<leader>A	nvim/vimrc/mappings.vim	/^nnoremap <leader>A :exec "Rg ".expand("<cword>")<cr>$/;"	m
<leader>DM	nvim/vimrc/mappings.vim	/^nnoremap <leader>DM :!rsync -e ssh -azicuhP --delete --stats \/mnt\/mint-root\/home\/sumosud0\/Projects\/shaun-datatill-dev\/ datatill@jd.datatill.com:\/var\/www\/html\/datatill\/ --exclude='.hg' --exclude='.idea' --exclude='system_installation' 2> \/dev\/null<cr>$/;"	m
<leader>HA	nvim/init.vim	/^nnoremap <leader>HA :Hgannotate<CR>$/;"	m
<leader>HC	nvim/init.vim	/^nnoremap <leader>HC :Hgcommit<CR>$/;"	m
<leader>HL	nvim/init.vim	/^nnoremap <leader>HL :Hglog<CR>$/;"	m
<leader>HS	nvim/init.vim	/^nnoremap <leader>HS :Hgstatus<CR>$/;"	m
<leader>HT	nvim/init.vim	/^nnoremap <leader>HT :Hglogthis<CR>$/;"	m
<leader>TT	nvim/vimrc/mappings.vim	/^nnoremap <leader>TT :exec "Tabularize \/".expand(matchstr(getline('.'), '\\%' . col('.') . 'c.'))<cr>$/;"	m
<leader>]	nvim/init.vim	/^map <leader>] :call phpactor#GotoDefinition()<CR>$/;"	m
<leader>bb	nvim/init.vim	/^nnoremap <leader>bb :buffers<cr>:buffer<Space>$/;"	m
<leader>bf	nvim/vimrc/mappings.vim	/^nnoremap <leader>bf :BufOnly<cr>$/;"	m
<leader>dk	nvim/init.vim	/^nnoremap <leader>dk :call pdv#DocumentWithSnip()<CR>$/;"	m
<leader>ep	nvim/init.vim	/^nnoremap <silent> <leader>ep :e \/etc\/php.ini<CR>$/;"	m
<leader>et	nvim/init.vim	/^nnoremap <silent> <leader>et :e ~\/.tmux.conf$/;"	m
<leader>ev	nvim/init.vim	/^nnoremap <silent> <leader>ev :e $MYVIMRC<CR>$/;"	m
<leader>fd	nvim/init.vim	/^nnoremap <silent><leader>fd :call PhpCsFixerFixDirectory()<CR>$/;"	m
<leader>ff	nvim/init.vim	/^nnoremap <silent><leader>ff :call PhpCsFixerFixFile()<CR>$/;"	m
<leader>gb	nvim/init.vim	/^nnoremap <leader>gb :ls<CR>:b<Space>$/;"	m
<leader>lk	nvim/init.vim	/^nnoremap <leader>lk :%s\/\\s+$\/\/<CR>:let @\/=''<CR>$/;"	m
<leader>mp	nvim/init.vim	/^nnoremap <leader>mp :MirrorPush<CR>$/;"	m
<leader>nt	nvim/init.vim	/^noremap <leader>nt :NERDTreeToggle<CR>$/;"	m
<leader>rap	nvim/init.vim	/^nnoremap <leader>rap :call PHPModify("add_missing_properties")<cr>$/;"	m
<leader>rcc	nvim/init.vim	/^nnoremap <leader>rcc :call phpactor#CopyFile()<cr>$/;"	m
<leader>rei	nvim/init.vim	/^nnoremap <leader>rei :call phpactor#ClassInflect()<cr>$/;"	m
<leader>rfc	nvim/init.vim	/^nnoremap <leader>rfc :call PHPModify("complete_constructor")<cr>$/;"	m
<leader>ric	nvim/init.vim	/^nnoremap <leader>ric :call PHPModify("implement_contracts")<cr>$/;"	m
<leader>rmc	nvim/init.vim	/^nnoremap <leader>rmc :call phpactor#MoveFile()<cr>$/;"	m
<leader>rmd	nvim/init.vim	/^nnoremap <leader>rmd :call phpactor#FindReferences()<cr>$/;"	m
<leader>s<space>	nvim/init.vim	/^nnoremap <leader>s<space> <Plug>(unite_restart)$/;"	m
<leader>sp	nvim/init.vim	/^nnoremap <silent> <leader>sp :! sudo systemctl restart httpd<CR>$/;"	m
<leader>src	nvim/init.vim	/^nnoremap <leader>src :call phpactor#FindReferences()<cr>$/;"	m
<leader>sv	nvim/init.vim	/^nnoremap <silent> <leader>sv :so $MYVIMRC<CR>$/;"	m
<leader>tF	nvim/init.vim	/^nmap <silent> <leader>tF :TestFile<CR>$/;"	m
<leader>tL	nvim/init.vim	/^nmap <silent> <leader>tL :TestLast<CR>$/;"	m
<leader>tN	nvim/init.vim	/^nmap <silent> <leader>tN :TestNearest<CR>$/;"	m
<leader>tS	nvim/init.vim	/^nmap <silent> <leader>tS :TestSuite<CR>$/;"	m
<leader>tV	nvim/init.vim	/^nmap <silent> <leader>tV :TestVisit<CR>$/;"	m
<leader>us	nvim/init.vim	/^nnoremap <leader>us :split<cr> :<C-u>Unite -start-insert file_rec\/async<cr>$/;"	m
<leader>xx	nvim/vimrc/misc.vim	/^nnoremap <leader>xx :Xbit<cr>$/;"	m
<left>	nvim/init.vim	/^noremap <left> <nop>$/;"	m
<return>	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^inoremap <return> <C-R>=Ulti_ExpandOrEnter()<CR>$/;"	m	language:Vim
<right>	nvim/init.vim	/^noremap <right> <nop>$/;"	m
<s-tab>	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^inoremap <expr><s-tab> pumvisible() ? "\\<C-p>" : "\\<TAB>"$/;"	m	language:Vim
<tab>	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^inoremap <expr><tab> pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m	language:Vim
<up>	nvim/init.vim	/^noremap <up> <nop>$/;"	m
BSD_ERROR_H_	tmux/tmux-mem-cpu-load/common/error.h	20;"	d
BSD_METER_COMMON_H_	tmux/tmux-mem-cpu-load/common/getsysctl.h	23;"	d
BYTES	tmux/tmux-mem-cpu-load/common/conversions.h	/^  BYTES = 0,$/;"	e	enum:BYTE_UNITS
BYTE_UNITS	tmux/tmux-mem-cpu-load/common/conversions.h	/^enum BYTE_UNITS$/;"	g
Bs	nvim/init.vim	/^command! -nargs=1 Bs :call BufSel("<args>")$/;"	c
BufSel	nvim/init.vim	/^function! BufSel(pattern)$/;"	f
CONVERSIONS_H_	tmux/tmux-mem-cpu-load/common/conversions.h	20;"	d
CPU_H_	tmux/tmux-mem-cpu-load/common/cpu.h	20;"	d
CPU_MODE	tmux/tmux-mem-cpu-load/common/cpu.h	/^enum CPU_MODE$/;"	g
CPU_MODE_DEFAULT	tmux/tmux-mem-cpu-load/common/cpu.h	/^  CPU_MODE_DEFAULT,$/;"	e	enum:CPU_MODE
CPU_MODE_THREADS	tmux/tmux-mem-cpu-load/common/cpu.h	/^  CPU_MODE_THREADS$/;"	e	enum:CPU_MODE
CP_IDLE	tmux/tmux-mem-cpu-load/common/cpu.h	27;"	d
CP_IDLE	tmux/tmux-mem-cpu-load/common/cpu.h	38;"	d
CP_IDLE	tmux/tmux-mem-cpu-load/common/cpu.h	42;"	d
CP_INTR	tmux/tmux-mem-cpu-load/common/cpu.h	37;"	d
CP_NICE	tmux/tmux-mem-cpu-load/common/cpu.h	28;"	d
CP_NICE	tmux/tmux-mem-cpu-load/common/cpu.h	32;"	d
CP_STATES	tmux/tmux-mem-cpu-load/common/cpu.h	29;"	d
CP_STATES	tmux/tmux-mem-cpu-load/common/cpu.h	39;"	d
CP_STATES	tmux/tmux-mem-cpu-load/common/cpu.h	43;"	d
CP_SYS	tmux/tmux-mem-cpu-load/common/cpu.h	26;"	d
CP_SYS	tmux/tmux-mem-cpu-load/common/cpu.h	33;"	d
CP_USER	tmux/tmux-mem-cpu-load/common/cpu.h	25;"	d
CP_USER	tmux/tmux-mem-cpu-load/common/cpu.h	31;"	d
DefaultWorkspace	nvim/init.vim	/^command! -register DefaultWorkspace call DefaultWorkspace()$/;"	c
DefaultWorkspace	nvim/init.vim	/^function! DefaultWorkspace()$/;"	f
DeleteTrailingWS	nvim/vimrc/misc.vim	/^func! DeleteTrailingWS()$/;"	f
ErrorHandler	nvim/composer-setup.php	/^class ErrorHandler$/;"	c
GETSYSCTL	tmux/tmux-mem-cpu-load/common/getsysctl.h	32;"	d
GIGABYTES	tmux/tmux-mem-cpu-load/common/conversions.h	/^  GIGABYTES = 3$/;"	e	enum:BYTE_UNITS
GRAPH_H_	tmux/tmux-mem-cpu-load/common/graph.h	20;"	d
HUDG_GetDigraph	nvim/autoload/hudigraphs.vim	/^function! HUDG_GetDigraph ()$/;"	f
HttpClient	nvim/composer-setup.php	/^class HttpClient {$/;"	c
Installer	nvim/composer-setup.php	/^class Installer$/;"	c
K	nvim/init.vim	/^nnoremap K :call LanguageClient_textDocument_hover()<cr>$/;"	m
KILOBYTES	tmux/tmux-mem-cpu-load/common/conversions.h	/^  KILOBYTES = 1,$/;"	e	enum:BYTE_UNITS
LOAD_H_	tmux/tmux-mem-cpu-load/common/load.h	21;"	d
MEGABYTES	tmux/tmux-mem-cpu-load/common/conversions.h	/^  MEGABYTES = 2,$/;"	e	enum:BYTE_UNITS
MEMORY_H_	tmux/tmux-mem-cpu-load/common/memory.h	20;"	d
MEMORY_MODE	tmux/tmux-mem-cpu-load/common/memory.h	/^enum MEMORY_MODE$/;"	g
MEMORY_MODE_DEFAULT	tmux/tmux-mem-cpu-load/common/memory.h	/^  MEMORY_MODE_DEFAULT,$/;"	e	enum:MEMORY_MODE
MEMORY_MODE_FREE_MEMORY	tmux/tmux-mem-cpu-load/common/memory.h	/^  MEMORY_MODE_FREE_MEMORY,$/;"	e	enum:MEMORY_MODE
MEMORY_MODE_USAGE_PERCENTAGE	tmux/tmux-mem-cpu-load/common/memory.h	/^  MEMORY_MODE_USAGE_PERCENTAGE$/;"	e	enum:MEMORY_MODE
MemoryStatus	tmux/tmux-mem-cpu-load/common/memory.h	/^struct MemoryStatus$/;"	s
NERDRemoveExtraSpaces	nvim/init.vim	/^let NERDRemoveExtraSpaces=1$/;"	v
NERDSpaceDelims	nvim/init.vim	/^let NERDSpaceDelims=1               " space around delimiters$/;"	v
NERDTreeAutoDeleteBuffer	nvim/init.vim	/^let NERDTreeAutoDeleteBuffer = 1$/;"	v
NERDTreeDirArrows	nvim/init.vim	/^let NERDTreeDirArrows = 1$/;"	v
NERDTreeMinimalUI	nvim/init.vim	/^let NERDTreeMinimalUI = 1$/;"	v
NONE	tmux/tmux-mem-cpu-load/common/powerline.h	/^  NONE,$/;"	e	enum:POWERLINE_DIRECTION
PHPExtractVariable	nvim/init.vim	/^function! PHPExtractVariable()$/;"	f
PHPModify	nvim/init.vim	/^function! PHPModify(transformer)$/;"	f
POWERLINE_DIRECTION	tmux/tmux-mem-cpu-load/common/powerline.h	/^enum POWERLINE_DIRECTION$/;"	g
POWERLINE_H	tmux/tmux-mem-cpu-load/common/powerline.h	20;"	d
POWERLINE_LEFT	tmux/tmux-mem-cpu-load/common/powerline.h	/^  POWERLINE_LEFT,$/;"	e	enum:POWERLINE_DIRECTION
POWERLINE_RIGHT	tmux/tmux-mem-cpu-load/common/powerline.h	/^  POWERLINE_RIGHT$/;"	e	enum:POWERLINE_DIRECTION
PWL_LEFT_FILLED	tmux/tmux-mem-cpu-load/common/powerline.cc	25;"	d	file:
PWL_RIGHT_FILLED	tmux/tmux-mem-cpu-load/common/powerline.cc	26;"	d	file:
SetErrorType	nvim/init.vim	/^function! SetErrorType(entry)$/;"	f
SetExecutableBit	nvim/vimrc/misc.vim	/^function! SetExecutableBit()$/;"	f
SetMessageType	nvim/init.vim	/^function! SetMessageType(entry)$/;"	f
SetWarningType	nvim/init.vim	/^function! SetWarningType(entry)$/;"	f
Tlist_Use_Right_Window	nvim/init.vim	/^let Tlist_Use_Right_Window = 1$/;"	v
Tlist_WinWidth	nvim/init.vim	/^let Tlist_WinWidth = 20$/;"	v
USE_ANSI	nvim/composer-setup.php	/^        define('USE_ANSI', false);$/;"	d
USE_ANSI	nvim/composer-setup.php	/^        define('USE_ANSI', true);$/;"	d
Ulti_ExpandOrEnter	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^function! Ulti_ExpandOrEnter()$/;"	f	language:Vim
Xbit	nvim/vimrc/misc.vim	/^command! Xbit call SetExecutableBit()$/;"	c
__construct	nvim/composer-setup.php	/^    public function __construct($disableTls = false, $cafile = false)$/;"	f
__construct	nvim/composer-setup.php	/^    public function __construct($quiet, $disableTls, $caFile)$/;"	f
_get_cpu_percentage	tmux/tmux-mem-cpu-load/osx/cpu.cc	/^host_cpu_load_info_data_t _get_cpu_percentage()$/;"	f
_luts_h	tmux/tmux-mem-cpu-load/common/luts.h	2;"	d
active	nvim/composer-setup.php	/^            $this->active = false;$/;"	v
active	nvim/composer-setup.php	/^            $this->active = true;$/;"	v
active	nvim/composer-setup.php	/^    protected $active;$/;"	v
active_getchar	nvim/autoload/hudigraphs.vim	/^function! s:active_getchar ()$/;"	f
algo	nvim/composer-setup.php	/^        $this->algo = defined('OPENSSL_ALGO_SHA384') ? OPENSSL_ALGO_SHA384 : 'SHA384';$/;"	v
algo	nvim/composer-setup.php	/^    private $algo;$/;"	v
append_ul	nvim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	nvim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	nvim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	nvim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	nvim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
auth	nvim/composer-setup.php	/^                $auth = base64_encode($auth);$/;"	v
auth	nvim/composer-setup.php	/^                $auth = urldecode($proxy['user']);$/;"	v
bang	nvim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	nvim/autoload/plug.vim	/^function! s:bar()$/;"	f
baseUrl	nvim/composer-setup.php	/^        $this->baseUrl = $uriScheme.':\/\/getcomposer.org';$/;"	v
baseUrl	nvim/composer-setup.php	/^    private $baseUrl;$/;"	v
bg2fg	tmux/tmux-mem-cpu-load/common/powerline.cc	/^const char * bg2fg( const char s[] )$/;"	f
caBundle	nvim/composer-setup.php	/^            $caBundle = dirname($caBundle);$/;"	v
caBundlePaths	nvim/composer-setup.php	/^        $caBundlePaths = array($/;"	v
caPath	nvim/composer-setup.php	/^        static $caPath = null;$/;"	v
cafile	nvim/composer-setup.php	/^            $cafile = self::getSystemCaRootBundlePath();$/;"	v
cafile	nvim/composer-setup.php	/^            $this->cafile = $this->installKey(HttpClient::getPackagedCaFile(), $home, 'cacert.pem');$/;"	v
cafile	nvim/composer-setup.php	/^        $this->cafile = $caFile;$/;"	v
cafile	nvim/composer-setup.php	/^    $cafile     = getOptValue('--cafile', $argv, false);$/;"	v
cafile	nvim/composer-setup.php	/^    private $cafile;$/;"	v
channel	nvim/composer-setup.php	/^    $channel    = in_array('--snapshot', $argv) ? 'snapshot' : (in_array('--preview', $argv) ? 'preview' : 'stable');$/;"	v
check	nvim/composer-setup.php	/^    $check      = in_array('--check', $argv);$/;"	v
checkParams	nvim/composer-setup.php	/^function checkParams($installDir, $version, $cafile)$/;"	f
checkPlatform	nvim/composer-setup.php	/^function checkPlatform(&$warnings, $quiet, $disableTls, $install)$/;"	f
check_ruby	nvim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	nvim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	nvim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
ciphers	nvim/composer-setup.php	/^        $ciphers = implode(':', array($/;"	v
clean	nvim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
cleanUp	nvim/composer-setup.php	/^    protected function cleanUp($result)$/;"	f
compare_git_uri	nvim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
configure	nvim/composer-setup.php	/^        $configure = $match[1];$/;"	v
configured	nvim/composer-setup.php	/^        $configured = ini_get('openssl.cafile');$/;"	v
configured	nvim/composer-setup.php	/^        $configured = ini_get('openssl.capath');$/;"	v
context	nvim/composer-setup.php	/^        $context = $this->getStreamContext($url);$/;"	v
convert_unit	tmux/tmux-mem-cpu-load/common/conversions.h	/^inline T convert_unit( T num, int to, int from = BYTES)$/;"	f
cpuQuery	tmux/tmux-mem-cpu-load/windows/cpu.cc	/^static PDH_HQUERY cpuQuery;$/;"	v	file:
cpuTotal	tmux/tmux-mem-cpu-load/windows/cpu.cc	/^static PDH_HCOUNTER cpuTotal;$/;"	v	file:
cpu_percentage	tmux/tmux-mem-cpu-load/freebsd/cpu.cc	/^float cpu_percentage( unsigned int cpu_usage_delay )$/;"	f
cpu_percentage	tmux/tmux-mem-cpu-load/linux/cpu.cc	/^float cpu_percentage( unsigned cpu_usage_delay )$/;"	f
cpu_percentage	tmux/tmux-mem-cpu-load/netbsd/cpu.cc	/^float cpu_percentage( unsigned int cpu_usage_delay )$/;"	f
cpu_percentage	tmux/tmux-mem-cpu-load/openbsd/cpu.cc	/^float cpu_percentage( unsigned int cpu_usage_delay )$/;"	f
cpu_percentage	tmux/tmux-mem-cpu-load/osx/cpu.cc	/^float cpu_percentage( unsigned int cpu_usage_delay )$/;"	f
cpu_percentage	tmux/tmux-mem-cpu-load/windows/cpu.cc	/^float cpu_percentage( unsigned cpu_usage_delay )$/;"	f
cpu_percentage_lut	tmux/tmux-mem-cpu-load/common/luts.h	/^static const char cpu_percentage_lut[][32] = {$/;"	v
cpu_string	tmux/tmux-mem-cpu-load/common/main.cc	/^std::string cpu_string( CPU_MODE cpu_mode, unsigned int cpu_usage_delay, unsigned int graph_lines,$/;"	f
decode	nvim/composer-setup.php	/^                    $decode = false;$/;"	v
decode	nvim/composer-setup.php	/^                    $decode = true;$/;"	v
decode	nvim/composer-setup.php	/^            $decode = false;$/;"	v
define_commands	nvim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
delete	nvim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	nvim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
deoplete#sources#jedi#show_docstring	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let deoplete#sources#jedi#show_docstring = 1$/;"	v	language:Vim
diff	nvim/autoload/plug.vim	/^function! s:diff()$/;"	f
dirpath	nvim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
disableTls	nvim/composer-setup.php	/^        $this->disableTls = $disableTls;$/;"	v
disableTls	nvim/composer-setup.php	/^    $disableTls = in_array('--disable-tls', $argv);$/;"	v
disableTls	nvim/composer-setup.php	/^    private $disableTls = false;$/;"	v
disableTls	nvim/composer-setup.php	/^    private $disableTls;$/;"	v
displayHelp	nvim/composer-setup.php	/^function displayHelp()$/;"	f
do	nvim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	nvim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	nvim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
downloadToTmp	nvim/composer-setup.php	/^    protected function downloadToTmp($url, &$signature, &$error)$/;"	f
downloadVersionData	nvim/composer-setup.php	/^    protected function downloadVersionData(&$data, &$error)$/;"	f
envCertDir	nvim/composer-setup.php	/^        $envCertDir = getenv('SSL_CERT_DIR');$/;"	v
envCertFile	nvim/composer-setup.php	/^        $envCertFile = getenv('SSL_CERT_FILE');$/;"	v
err	nvim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
errFmt	nvim/composer-setup.php	/^        $errFmt = 'The "%s" file could not be %s: %s';$/;"	v
errFmt	nvim/composer-setup.php	/^        $errFmt = 'The "%s" file could not be downloaded: %s';$/;"	v
errHandler	nvim/composer-setup.php	/^        $this->errHandler = new ErrorHandler();$/;"	v
errHandler	nvim/composer-setup.php	/^    private $errHandler;$/;"	v
error	nvim/composer-setup.php	/^                $error = sprintf('Could not write to file "%s": %s', $this->target, $this->errHandler->message);$/;"	v
error	nvim/composer-setup.php	/^            $error = $e->getMessage();$/;"	v
error	nvim/composer-setup.php	/^            $error = 'Signature mismatch, could not verify the phar file integrity';$/;"	v
error	nvim/composer-setup.php	/^            $error = 'The download is corrupt: '.$pharError;$/;"	v
error	nvim/composer-setup.php	/^            $error = sprintf($/;"	v
error	nvim/composer-setup.php	/^            $error = sprintf($errFmt, $sigUrl, $this->errHandler->message);$/;"	v
error	nvim/composer-setup.php	/^            $error = sprintf($errFmt, $url, $this->errHandler->message);$/;"	v
error	nvim/composer-setup.php	/^            $error = sprintf($errFmt, $url, 'downloaded', $this->errHandler->message);$/;"	v
error	nvim/composer-setup.php	/^            $error = sprintf($errFmt, $url, 'json-decoded', $this->getJsonError());$/;"	v
error	nvim/composer-setup.php	/^            $error = sprintf('Could not create file "%s": %s', $this->tmpFile, $this->errHandler->message);$/;"	v
error	nvim/composer-setup.php	/^        $error = '';$/;"	v
error	tmux/tmux-mem-cpu-load/common/error.h	/^inline void error( const char * error )$/;"	f
errors	nvim/composer-setup.php	/^        $errors = explode(PHP_EOL, ob_get_clean());$/;"	v
errors	nvim/composer-setup.php	/^    $errors = array();$/;"	v
esc	nvim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	nvim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
extract_name	nvim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
filename	nvim/composer-setup.php	/^    $filename   = getOptValue('--filename', $argv, 'composer.phar');$/;"	v
filter_digraphs	nvim/autoload/hudigraphs.vim	/^function! s:filter_digraphs (digraphs, char)$/;"	f
find_name	nvim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	nvim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	nvim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
force	nvim/composer-setup.php	/^    $force      = in_array('--force', $argv);$/;"	v
format	nvim/composer-setup.php	/^        $format = $styles[$color];$/;"	v
format	nvim/composer-setup.php	/^    $format = '%s';$/;"	v
format_git_log	nvim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	nvim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g:HUDG_filtering	nvim/autoload/hudigraphs.vim	/^let g:HUDG_filtering = 1$/;"	v
g:LanguageClient_diagnosticsEnable	nvim/init.vim	/^let g:LanguageClient_diagnosticsEnable  = 0$/;"	v
g:LanguageClient_signColumnAlwaysOn	nvim/init.vim	/^let g:LanguageClient_signColumnAlwaysOn = 0$/;"	v
g:NERDAltDelims_java	nvim/init.vim	/^let g:NERDAltDelims_java = 1$/;"	v
g:NERDCommentEmptyLines	nvim/init.vim	/^let g:NERDCommentEmptyLines = 1$/;"	v
g:NERDCompactSexyComs	nvim/init.vim	/^let g:NERDCompactSexyComs = 1$/;"	v
g:NERDCustomDelimiters	nvim/init.vim	/^let g:NERDCustomDelimiters = { 'c': { 'left': '\/**','right': '*\/' } }$/;"	v
g:NERDDefaultAlign	nvim/init.vim	/^let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDRemoveExtraSpaces	nvim/init.vim	/^let g:NERDRemoveExtraSpaces=1$/;"	v
g:NERDSpaceDelims	nvim/init.vim	/^let g:NERDSpaceDelims = 1$/;"	v
g:NERDTreeAutoDeleteBuffer	nvim/init.vim	/^let g:NERDTreeAutoDeleteBuffer = 1$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	nvim/init.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = 1$/;"	v
g:NERDTreeChDirMode	nvim/init.vim	/^let g:NERDTreeChDirMode = 2$/;"	v
g:NERDTreeHijackNetrw	nvim/init.vim	/^let g:NERDTreeHijackNetrw = 1$/;"	v
g:NERDTreeIndicatorMapCustom	nvim/init.vim	/^let g:NERDTreeIndicatorMapCustom = {$/;"	v
g:NERDTreeShowBookmarks	nvim/init.vim	/^let g:NERDTreeShowBookmarks = 0$/;"	v
g:NERDTreeShowHidden	nvim/init.vim	/^let g:NERDTreeShowHidden=1$/;"	v
g:NERDTreeWinSize	nvim/init.vim	/^let g:NERDTreeWinSize = 38$/;"	v
g:NERDTreeWinSize	nvim/init.vim	/^let g:NERDTreeWinSize=28$/;"	v
g:NERDTrimTrailingWhitespace	nvim/init.vim	/^let g:NERDTrimTrailingWhitespace = 1$/;"	v
g:SrcExpl_isUpdateTags	nvim/init.vim	/^let g:SrcExpl_isUpdateTags = 0$/;"	v
g:SrcExpl_refreshTime	nvim/init.vim	/^let g:SrcExpl_refreshTime = 500$/;"	v
g:SrcExpl_updateTagsKey	nvim/init.vim	/^let g:SrcExpl_updateTagsKey = "<F12>"$/;"	v
g:Tex_DefaultTargetFormat	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:Tex_DefaultTargetFormat='pdf'$/;"	v	language:Vim
g:Tlist_Use_Right_Window	nvim/init.vim	/^let g:Tlist_Use_Right_Window = 1$/;"	v
g:Tlist_WinWidth	nvim/init.vim	/^let g:Tlist_WinWidth = 45$/;"	v
g:UltiSnipsEditSplit	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v	language:Vim
g:UltiSnipsExpandTrigger	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsExpandTrigger="<c-t>"$/;"	v	language:Vim
g:UltiSnipsJumpBackwardTrigger	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-j>"$/;"	v	language:Vim
g:UltiSnipsJumpForwardTrigger	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-k>"$/;"	v	language:Vim
g:UltiSnipsListSnippets	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsListSnippets = '<C-S-tab>'$/;"	v	language:Vim
g:UltiSnipsSnippetDirectories	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsSnippetDirectories = ['\/home\/sumosudo\/.config\/nvim\/snips', 'UltiSnips']$/;"	v	language:Vim
g:UltiSnipsSnippetsDir	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:UltiSnipsSnippetsDir = $HOME.'\/.config\/nvim\/snips'$/;"	v	language:Vim
g:airline#extensions#tabline#enabled	nvim/init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#formatter	nvim/init.vim	/^let g:airline#extensions#tabline#formatter = 'unique_tail'$/;"	v
g:airline_highlighting_cache	nvim/init.vim	/^let g:airline_highlighting_cache = 1$/;"	v
g:airline_powerline_fonts	nvim/init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_theme	nvim/init.vim	/^let g:airline_theme='hybrid'$/;"	v
g:auto_save	nvim/init.vim	/^let g:auto_save = 1$/;"	v
g:auto_save_silent	nvim/init.vim	/^let g:auto_save_silent = 1$/;"	v
g:deoplete#auto_complete_delay	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#auto_complete_delay= 30$/;"	v	language:Vim
g:deoplete#auto_complete_start_length	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#auto_complete_start_length = 1$/;"	v	language:Vim
g:deoplete#auto_refresh_delay	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#auto_refresh_delay= 5$/;"	v	language:Vim
g:deoplete#enable_at_startup	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v	language:Vim
g:deoplete#enable_camel_case	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#enable_camel_case = 1$/;"	v	language:Vim
g:deoplete#enable_ignore_case	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#enable_ignore_case = 1$/;"	v	language:Vim
g:deoplete#enable_refresh_always	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#enable_refresh_always = 1$/;"	v	language:Vim
g:deoplete#enable_smart_case	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#enable_smart_case = 1$/;"	v	language:Vim
g:deoplete#ignore_sources	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})$/;"	v	language:Vim
g:deoplete#ignore_sources	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#ignore_sources.php = ['omni']$/;"	v	language:Vim
g:deoplete#max_abbr_width	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#max_abbr_width = 0$/;"	v	language:Vim
g:deoplete#max_menu_width	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#max_menu_width = 0$/;"	v	language:Vim
g:deoplete#omni#functions	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#omni#functions = {}$/;"	v	language:Vim
g:deoplete#omni#functions	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#omni#functions.javascript = [$/;"	v	language:Vim
g:deoplete#omni#input_patterns	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^        let g:deoplete#omni#input_patterns = {}$/;"	v	language:Vim
g:deoplete#skip_chars	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#skip_chars = ['$']$/;"	v	language:Vim
g:deoplete#sources	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#sources = {}$/;"	v	language:Vim
g:deoplete#sources	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#sources._ = ['omni', 'buffer', 'member', 'tags', 'ultisnips', 'file']$/;"	v	language:Vim
g:deoplete#sources	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:deoplete#sources.javascript = ['file', 'ultisnips', 'ternjs']$/;"	v	language:Vim
g:easytags_async	nvim/init.vim	/^let g:easytags_async = 1$/;"	v
g:easytags_dynamic_files	nvim/init.vim	/^let g:easytags_dynamic_files = 2$/;"	v
g:easytags_events	nvim/init.vim	/^let g:easytags_events = ['BufReadPost', 'BufWritePost']$/;"	v
g:easytags_resolve_links	nvim/init.vim	/^let g:easytags_resolve_links = 1$/;"	v
g:easytags_suppress_ctags_warning	nvim/init.vim	/^let g:easytags_suppress_ctags_warning = 1$/;"	v
g:gundo_auto_preview	nvim/init.vim	/^let g:gundo_auto_preview=1$/;"	v
g:gundo_playback_delay	nvim/init.vim	/^let g:gundo_playback_delay=180$/;"	v
g:hybrid_custom_term_colors	nvim/init.vim	/^let g:hybrid_custom_term_colors = 1$/;"	v
g:hybrid_reduced_contrast	nvim/init.vim	/^let g:hybrid_reduced_contrast = 1$/;"	v
g:indent_guides_enable_on_vim_startup	nvim/init.vim	/^let g:indent_guides_enable_on_vim_startup = 1$/;"	v
g:javascript_conceal_NaN	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_NaN                  = "ℕ"$/;"	v	language:Vim
g:javascript_conceal_arrow_function	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_arrow_function       = "⇒"$/;"	v	language:Vim
g:javascript_conceal_function	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_function             = "ƒ"$/;"	v	language:Vim
g:javascript_conceal_noarg_arrow_function	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_noarg_arrow_function = "🞅"$/;"	v	language:Vim
g:javascript_conceal_null	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_null                 = "ø"$/;"	v	language:Vim
g:javascript_conceal_prototype	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_prototype            = "¶"$/;"	v	language:Vim
g:javascript_conceal_return	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_return               = "⇚"$/;"	v	language:Vim
g:javascript_conceal_static	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_static               = "•"$/;"	v	language:Vim
g:javascript_conceal_super	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_super                = "Ω"$/;"	v	language:Vim
g:javascript_conceal_this	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_this                 = "@"$/;"	v	language:Vim
g:javascript_conceal_undefined	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_undefined            = "¿"$/;"	v	language:Vim
g:javascript_conceal_underscore_arrow_function	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:javascript_conceal_underscore_arrow_function = "🞅"$/;"	v	language:Vim
g:loaded_plug	nvim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:neomake_error_sign	nvim/init.vim	/^let g:neomake_error_sign   = {'text': '✖', 'texthl': 'NeomakeErrorSign'}$/;"	v
g:neomake_info_sign	nvim/init.vim	/^let g:neomake_info_sign    = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}$/;"	v
g:neomake_message_sign	nvim/init.vim	/^let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}$/;"	v
g:neomake_php_enabled_makers	nvim/init.vim	/^let g:neomake_php_enabled_makers = ['php']$/;"	v
g:neomake_php_php_maker	nvim/init.vim	/^let g:neomake_php_php_maker = {$/;"	v
g:neomake_php_phpcs_args_standard	nvim/init.vim	/^let g:neomake_php_phpcs_args_standard = 'PSR2'$/;"	v
g:neomake_php_phpcs_maker	nvim/init.vim	/^let g:neomake_php_phpcs_maker = {$/;"	v
g:neomake_warning_sign	nvim/init.vim	/^let g:neomake_warning_sign = {'text': '∆', 'texthl': 'NeomakeWarningSign'}$/;"	v
g:nerdtree_tabs_open_on_console_startup	nvim/init.vim	/^let g:nerdtree_tabs_open_on_console_startup = 0$/;"	v
g:nvimux_new_window_buffer	nvim/init.vim	/^let g:nvimux_new_window_buffer = 'single'$/;"	v
g:nvimux_open_term_by_default	nvim/init.vim	/^let g:nvimux_open_term_by_default = 'true'$/;"	v
g:nvimux_prefix	nvim/init.vim	/^let g:nvimux_prefix = '<C-a>'$/;"	v
g:nvimux_quickterm_direction	nvim/init.vim	/^let g:nvimux_quickterm_direction = 'botright'$/;"	v
g:nvimux_quickterm_orientation	nvim/init.vim	/^let g:nvimux_quickterm_orientation = 'vertical'$/;"	v
g:nvimux_quickterm_scope	nvim/init.vim	/^let g:nvimux_quickterm_scope = 't'$/;"	v
g:nvimux_quickterm_size	nvim/init.vim	/^let g:nvimux_quickterm_size = '80'$/;"	v
g:pad#dir	nvim/init.vim	/^let g:pad#dir = '~\/.notes'$/;"	v
g:pdv_template_dir	nvim/init.vim	/^let g:pdv_template_dir = $HOME ."\/.config\/nvim\/plugged\/pdv\/templates_snip"$/;"	v
g:php_cs_fixer_config	nvim/init.vim	/^let g:php_cs_fixer_config = "default"                  " options: --config$/;"	v
g:php_cs_fixer_dry_run	nvim/init.vim	/^let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option$/;"	v
g:php_cs_fixer_enable_default_mapping	nvim/init.vim	/^let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)$/;"	v
g:php_cs_fixer_level	nvim/init.vim	/^let g:php_cs_fixer_level = "symfony"                   " options: --level (default:symfony)$/;"	v
g:php_cs_fixer_php_path	nvim/init.vim	/^let g:php_cs_fixer_php_path = "php"               " Path to PHP$/;"	v
g:php_cs_fixer_rules	nvim/init.vim	/^let g:php_cs_fixer_rules = "@PSR2"          " options: --rules (default:@PSR2)$/;"	v
g:php_cs_fixer_verbose	nvim/init.vim	/^let g:php_cs_fixer_verbose = 0$/;"	v
g:plugs_order	nvim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:pymode_lint_on_write	nvim/init.vim	/^let g:pymode_lint_on_write = 0$/;"	v
g:quicktask_autosave	nvim/init.vim	/^let g:quicktask_autosave = 1$/;"	v
g:rg_command	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:rg_command="rg -g '!tags' -g '!*.orig' -g '!*.rej' --vimgrep"$/;"	v	language:Vim
g:rg_highlight	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:rg_highlight=1$/;"	v	language:Vim
g:rg_root_types	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:rg_root_types=['.git', '.hg']$/;"	v	language:Vim
g:slimv_impl	nvim/init.vim	/^let g:slimv_impl = 'sbcl'$/;"	v
g:slimv_keybindings	nvim/init.vim	/^let g:slimv_keybindings = 2$/;"	v
g:slimv_lisp	nvim/init.vim	/^let g:slimv_lisp = '\/usr\/bin\/sbcl'$/;"	v
g:slimv_repl_simple_eval	nvim/init.vim	/^let g:slimv_repl_simple_eval = 1$/;"	v
g:slimv_repl_split	nvim/init.vim	/^let g:slimv_repl_split = 2$/;"	v
g:slimv_swank_cmd	nvim/init.vim	/^let g:slimv_swank_cmd = '! sbcl --load \/home\/sumosudo\/.config\/nvim\/plugged\/slimv\/slime\/start-swank.lisp'$/;"	v
g:slimv_swank_cmd	nvim/init.vim	/^let g:slimv_swank_cmd = '! sbcl --load ~\/.config\/nvim\/plugged\/slimv\/slime\/start-swank.lisp'$/;"	v
g:snips_author	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:snips_author = 'Shaun Pearce <shaun@datatill.com>'$/;"	v	language:Vim
g:startify_session_dir	nvim/init.vim	/^let g:startify_session_dir = '~\/.config\/nvim\/session'$/;"	v
g:syntastic_aggregate_errors	nvim/init.vim	/^let g:syntastic_aggregate_errors = 1$/;"	v
g:syntastic_always_populate_loc_list	nvim/init.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	nvim/init.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	nvim/init.vim	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	nvim/init.vim	/^let g:syntastic_check_on_wq = 1$/;"	v
g:syntastic_echo_current_error	nvim/init.vim	/^let g:syntastic_echo_current_error=1$/;"	v
g:syntastic_enable_signs	nvim/init.vim	/^let g:syntastic_enable_signs=1$/;"	v
g:syntastic_mode_map	nvim/init.vim	/^let g:syntastic_mode_map = {$/;"	v
g:syntastic_php_checkers	nvim/init.vim	/^let g:syntastic_php_checkers = ['php']$/;"	v
g:syntastic_quiet_messages	nvim/init.vim	/^let g:syntastic_quiet_messages = { "type": "style" }$/;"	v
g:tern#arguments	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:tern#arguments = ['--persistent']$/;"	v	language:Vim
g:tern#command	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:tern#command = ['tern']$/;"	v	language:Vim
g:tern_request_timeout	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:tern_request_timeout = 1$/;"	v	language:Vim
g:tern_request_timeout	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:tern_request_timeout = 6000$/;"	v	language:Vim
g:tex_flavor	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:tex_flavor='latex'$/;"	v	language:Vim
g:ulti_expand_res	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:ulti_expand_res = 0$/;"	v	language:Vim
g:ultisnips_php_scalar_types	/home/sumosudo/Projects/dot-files/nvim/vimrc/plugin_configs.vim	/^let g:ultisnips_php_scalar_types = 1$/;"	v	language:Vim
g:unite_source_history_yank_enable	nvim/init.vim	/^let g:unite_source_history_yank_enable = 1$/;"	v
g:unite_source_rec_async_command	nvim/init.vim	/^  let g:unite_source_rec_async_command='ag --nocolor --nogroup -g ""'$/;"	v
g:vdebug_keymap	nvim/init.vim	/^let g:vdebug_keymap = {$/;"	v
g:vdebug_options	nvim/init.vim	/^let g:vdebug_options = {}$/;"	v
g:vdebug_options	nvim/init.vim	/^let g:vdebug_options["port"] = 9000$/;"	v
g:vim_php_refactoring_auto_validate_visibility	nvim/init.vim	/^let g:vim_php_refactoring_auto_validate_visibility = 1$/;"	v
g:vim_php_refactoring_default_method_visibility	nvim/init.vim	/^let g:vim_php_refactoring_default_method_visibility = 'private'$/;"	v
g:vim_php_refactoring_default_property_visibility	nvim/init.vim	/^let g:vim_php_refactoring_default_property_visibility = 'private'$/;"	v
g:vim_php_refactoring_phpdoc	nvim/init.vim	/^let g:vim_php_refactoring_phpdoc = "pdv#DocumentCurrentLine"$/;"	v
g:vim_php_refactoring_use_default_mapping	nvim/init.vim	/^let g:vim_php_refactoring_use_default_mapping = 0$/;"	v
gY	nvim/init.vim	/^noremap gY gg"+yG$/;"	m
gd	nvim/init.vim	/^nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>$/;"	m
get	nvim/composer-setup.php	/^    public function get($url)$/;"	f
getComposerHome	nvim/composer-setup.php	/^    protected function getComposerHome()$/;"	f
getHomeDir	nvim/composer-setup.php	/^function getHomeDir()$/;"	f
getJsonError	nvim/composer-setup.php	/^    protected function getJsonError()$/;"	f
getMergedStreamContext	nvim/composer-setup.php	/^    protected function getMergedStreamContext($url)$/;"	f
getOptValue	nvim/composer-setup.php	/^function getOptValue($opt, $argv, $default)$/;"	f
getPKDev	nvim/composer-setup.php	/^    public static function getPKDev()$/;"	f
getPKTags	nvim/composer-setup.php	/^    public static function getPKTags()$/;"	f
getPackagedCaFile	nvim/composer-setup.php	/^    public static function getPackagedCaFile()$/;"	f
getPlatformIssues	nvim/composer-setup.php	/^function getPlatformIssues(&$errors, &$warnings, $install)$/;"	f
getSignature	nvim/composer-setup.php	/^    protected function getSignature($url, &$signature)$/;"	f
getStreamContext	nvim/composer-setup.php	/^    protected function getStreamContext($url)$/;"	f
getSystemCaRootBundlePath	nvim/composer-setup.php	/^    public static function getSystemCaRootBundlePath()$/;"	f
getTlsStreamContextDefaults	nvim/composer-setup.php	/^    protected function getTlsStreamContextDefaults($cafile)$/;"	f
getUserDir	nvim/composer-setup.php	/^function getUserDir()$/;"	f
getVersion	nvim/composer-setup.php	/^    protected function getVersion($channel, &$version, &$url, &$error)$/;"	f
get_cpu_count	tmux/tmux-mem-cpu-load/freebsd/cpu.cc	/^uint8_t get_cpu_count()$/;"	f
get_cpu_count	tmux/tmux-mem-cpu-load/linux/cpu.cc	/^uint8_t get_cpu_count()$/;"	f
get_cpu_count	tmux/tmux-mem-cpu-load/netbsd/cpu.cc	/^uint8_t get_cpu_count()$/;"	f
get_cpu_count	tmux/tmux-mem-cpu-load/openbsd/cpu.cc	/^uint8_t get_cpu_count()$/;"	f
get_cpu_count	tmux/tmux-mem-cpu-load/osx/cpu.cc	/^uint8_t get_cpu_count()$/;"	f
get_cpu_count	tmux/tmux-mem-cpu-load/windows/cpu.cc	/^uint8_t get_cpu_count()$/;"	f
get_digraphs	nvim/autoload/hudigraphs.vim	/^function! s:get_digraphs ()$/;"	f
get_graph_by_percentage	tmux/tmux-mem-cpu-load/common/graph.cc	/^std::string get_graph_by_percentage( unsigned value, unsigned len ) $/;"	f
get_graph_by_value	tmux/tmux-mem-cpu-load/common/graph.cc	/^std::string get_graph_by_value( unsigned value, unsigned max, unsigned len )$/;"	f
get_retabulated_digraphs	nvim/autoload/hudigraphs.vim	/^function! s:get_retabulated_digraphs ()$/;"	f
getsysctl	tmux/tmux-mem-cpu-load/common/getsysctl.h	/^static inline void getsysctl( const char *name, void *ptr, size_t len )$/;"	f
git_validate	nvim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	nvim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	nvim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	nvim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
gr	nvim/init.vim	/^nnoremap <silent> gr :call LanguageClient_textDocument_references()<CR>$/;"	m
gy	nvim/init.vim	/^vnoremap gy "+y$/;"	m
handleError	nvim/composer-setup.php	/^    public function handleError($code, $msg)$/;"	f
hash_match	nvim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
help	nvim/composer-setup.php	/^    $help       = in_array('--help', $argv);$/;"	v
home	nvim/composer-setup.php	/^                $home = $xdgConfig.'\/composer';$/;"	v
home	nvim/composer-setup.php	/^            $home = $userDir.'\/.composer';$/;"	v
home	nvim/composer-setup.php	/^            $home = $userDir.'\/Composer';$/;"	v
home	nvim/composer-setup.php	/^        $home = $this->getComposerHome();$/;"	v
home	nvim/composer-setup.php	/^        $home = getHomeDir();$/;"	v
home	nvim/composer-setup.php	/^    $home = getenv('COMPOSER_HOME');$/;"	v
host	nvim/composer-setup.php	/^            $host = parse_url($url, PHP_URL_HOST);$/;"	v
httpClient	nvim/composer-setup.php	/^            $this->httpClient = new HttpClient($this->disableTls, $this->cafile);$/;"	v
httpClient	nvim/composer-setup.php	/^    private $httpClient;$/;"	v
infer_properties	nvim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
infoMsg	nvim/composer-setup.php	/^                $infoMsg = 'Retrying...';$/;"	v
infoMsg	nvim/composer-setup.php	/^        $infoMsg = 'Downloading...';$/;"	v
infoType	nvim/composer-setup.php	/^                $infoType = 'error';$/;"	v
infoType	nvim/composer-setup.php	/^        $infoType = 'info';$/;"	v
iniMessage	nvim/composer-setup.php	/^        $iniMessage = PHP_EOL.'A php.ini file does not exist. You will have to create one.';$/;"	v
iniMessage	nvim/composer-setup.php	/^        $iniMessage = PHP_EOL.'The php.ini used by your command-line PHP is: ' . $iniPath;$/;"	v
initTargets	nvim/composer-setup.php	/^    protected function initTargets($installDir, $filename)$/;"	f
initTls	nvim/composer-setup.php	/^    protected function initTls()$/;"	f
install	nvim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
install	nvim/composer-setup.php	/^    protected function install($version, $channel)$/;"	f
installDir	nvim/composer-setup.php	/^        $installDir = realpath($installDir) ? realpath($installDir) : getcwd();$/;"	v
installDir	nvim/composer-setup.php	/^    $installDir = getOptValue('--install-dir', $argv, false);$/;"	v
installKey	nvim/composer-setup.php	/^    protected function installKey($data, $path, $filename)$/;"	f
installPath	nvim/composer-setup.php	/^        $this->installPath = (is_dir($installDir) ? rtrim($installDir, '\/').'\/' : '').$filename;$/;"	v
installPath	nvim/composer-setup.php	/^    private $installPath;$/;"	v
installed	nvim/composer-setup.php	/^        $installed = file_exists($target);$/;"	v
installer	nvim/composer-setup.php	/^        $installer = new Installer($quiet, $disableTls, $cafile);$/;"	v
installs	nvim/composer-setup.php	/^    private $installs = array();$/;"	v
ioncube	nvim/composer-setup.php	/^        $ioncube = ioncube_loader_version();$/;"	v
is_local_plug	nvim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	nvim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	nvim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	nvim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
j	nvim/init.vim	/^nnoremap j gj$/;"	m
jk	nvim/init.vim	/^inoremap jk <esc>`^$/;"	m
jkl;	nvim/init.vim	/^inoremap jkl; <esc>:wq<cr>$/;"	m
job_abort	nvim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	nvim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	nvim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	nvim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
k	nvim/init.vim	/^nnoremap k gk$/;"	m
last_non_empty_line	nvim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	nvim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lines	nvim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
load_lut	tmux/tmux-mem-cpu-load/common/luts.h	/^static const char load_lut[][32] = {$/;"	v
load_plugin	nvim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
load_string	tmux/tmux-mem-cpu-load/common/load.cc	/^std::string load_string( bool use_colors,$/;"	f
load_string	tmux/tmux-mem-cpu-load/windows/load.cc	/^std::string load_string( bool use_colors,$/;"	f
loaded_hudigraphs	nvim/autoload/hudigraphs.vim	/^let loaded_hudigraphs = 1$/;"	v
loaded_names	nvim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
lod	nvim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	nvim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	nvim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	nvim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	nvim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	nvim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	nvim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	nvim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
main	tmux/tmux-mem-cpu-load/common/main.cc	/^int main( int argc, char** argv )$/;"	f
mapMoveToWindowInDirection	nvim/init.vim	/^func! s:mapMoveToWindowInDirection(direction)$/;"	f
mapleader	nvim/init.vim	/^let mapleader = ","$/;"	v
maplocalleader	nvim/init.vim	/^let maplocalleader = "\\\\"$/;"	v
mem_lut	tmux/tmux-mem-cpu-load/common/luts.h	/^static const char mem_lut[][32] = {$/;"	v
mem_status	tmux/tmux-mem-cpu-load/freebsd/memory.cc	/^void mem_status( MemoryStatus & status )$/;"	f
mem_status	tmux/tmux-mem-cpu-load/linux/memory.cc	/^void mem_status( MemoryStatus & status )$/;"	f
mem_status	tmux/tmux-mem-cpu-load/netbsd/memory.cc	/^void mem_status( MemoryStatus & status )$/;"	f
mem_status	tmux/tmux-mem-cpu-load/openbsd/memory.cc	/^void mem_status( MemoryStatus & status )$/;"	f
mem_status	tmux/tmux-mem-cpu-load/osx/memory.cc	/^void mem_status( MemoryStatus & status )$/;"	f
mem_status	tmux/tmux-mem-cpu-load/windows/memory.cc	/^void mem_status( MemoryStatus & status )$/;"	f
mem_string	tmux/tmux-mem-cpu-load/common/memory.cc	/^std::string mem_string( const MemoryStatus & mem_status,$/;"	f
message	nvim/composer-setup.php	/^        $this->message = '';$/;"	v
message	nvim/composer-setup.php	/^    public $message;$/;"	v
names	nvim/autoload/plug.vim	/^function! s:names(...)$/;"	f
new_window	nvim/autoload/plug.vim	/^function! s:new_window()$/;"	f
next	nvim/composer-setup.php	/^        $next = $key + 1;$/;"	v
null	nvim/composer-setup.php	/^                $null = (defined('PHP_WINDOWS_VERSION_MAJOR') ? 'NUL' : '\/dev\/null');$/;"	v
nvim_cb	nvim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
ok	nvim/composer-setup.php	/^    $ok = checkPlatform($warnings, $quiet, $disableTls, true);$/;"	v
opensslVersion	nvim/composer-setup.php	/^        $opensslVersion = $opensslVersion ? $opensslVersion : OPENSSL_VERSION_TEXT;$/;"	v
opensslVersion	nvim/composer-setup.php	/^        $opensslVersion = substr($opensslVersion, 0, strpos($opensslVersion, ' '));$/;"	v
opensslVersion	nvim/composer-setup.php	/^        $opensslVersion = trim(strstr(OPENSSL_VERSION_TEXT, ' '));$/;"	v
optLength	nvim/composer-setup.php	/^    $optLength = strlen($opt);$/;"	v
options	nvim/composer-setup.php	/^            $options = $this->getTlsStreamContextDefaults($cafile);$/;"	v
options	nvim/composer-setup.php	/^            $this->options = array_replace_recursive($this->options, $options);$/;"	v
options	nvim/composer-setup.php	/^        $options = $this->options;$/;"	v
options	nvim/composer-setup.php	/^        $options = array($/;"	v
options	nvim/composer-setup.php	/^    private $options = array('http' => array());$/;"	v
out	nvim/composer-setup.php	/^function out($text, $color = null, $newLine = true)$/;"	f
outputErrors	nvim/composer-setup.php	/^    protected function outputErrors()$/;"	f
outputIssues	nvim/composer-setup.php	/^function outputIssues($issues)$/;"	f
parseVersionData	nvim/composer-setup.php	/^    protected function parseVersionData(array $data, $channel, &$version, &$url)$/;"	f
parse_options	nvim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
path	nvim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
path	nvim/composer-setup.php	/^            $path = preg_match('{^[0-9a-f]{40}$}', $version) ? $this->pubKeys['dev'] : $this->pubKeys['tags'];$/;"	v
phar	nvim/composer-setup.php	/^            $phar = new Phar($pharFile);$/;"	v
phpinfo	nvim/composer-setup.php	/^    $phpinfo = ob_get_clean();$/;"	v
plug#	nvim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	nvim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	nvim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	nvim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	nvim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug_window_exists	nvim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
powerline	tmux/tmux-mem-cpu-load/common/powerline.cc	/^void powerline( std::ostringstream & oss, const char color[],$/;"	f
prepare	nvim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	nvim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
print_help	tmux/tmux-mem-cpu-load/common/main.cc	/^void print_help()$/;"	f
process	nvim/composer-setup.php	/^function process($argv)$/;"	f
progress_bar	nvim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	nvim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
proxy	nvim/composer-setup.php	/^            $proxy = parse_url(!empty($_SERVER['http_proxy']) ? $_SERVER['http_proxy'] : $_SERVER['HTTP_PROXY']);$/;"	v
proxyURL	nvim/composer-setup.php	/^            $proxyURL = isset($proxy['scheme']) ? $proxy['scheme'] . ':\/\/' : '';$/;"	v
proxyURL	nvim/composer-setup.php	/^            $proxyURL = str_replace(array('http:\/\/', 'https:\/\/'), array('tcp:\/\/', 'ssl:\/\/'), $proxyURL);$/;"	v
pubKeys	nvim/composer-setup.php	/^        $this->pubKeys = array($/;"	v
pubKeys	nvim/composer-setup.php	/^    private $pubKeys = array();$/;"	v
pubkeyid	nvim/composer-setup.php	/^            $pubkeyid = openssl_pkey_get_public('file:\/\/'.$path);$/;"	v
quiet	nvim/composer-setup.php	/^    $quiet      = in_array('--quiet', $argv);$/;"	v
quiet	nvim/composer-setup.php	/^    private $quiet;$/;"	v
reap	nvim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	nvim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	nvim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	nvim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	nvim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	nvim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
reqFullUriEnv	nvim/composer-setup.php	/^                    $reqFullUriEnv = getenv('HTTPS_PROXY_REQUEST_FULLURI');$/;"	v
reqFullUriEnv	nvim/composer-setup.php	/^                    $reqFullUriEnv = getenv('HTTP_PROXY_REQUEST_FULLURI');$/;"	v
result	nvim/composer-setup.php	/^                    $result = file_get_contents('compress.zlib:\/\/data:application\/octet-stream;base64,'.base64_encode($result));$/;"	v
result	nvim/composer-setup.php	/^                    $result = zlib_decode($result);$/;"	v
result	nvim/composer-setup.php	/^                $result = true;$/;"	v
result	nvim/composer-setup.php	/^            $result = $this->install($version, $channel);$/;"	v
result	nvim/composer-setup.php	/^            $result = 1 === openssl_verify($/;"	v
result	nvim/composer-setup.php	/^            $result = false;$/;"	v
result	nvim/composer-setup.php	/^            $result = true;$/;"	v
result	nvim/composer-setup.php	/^        $result = false;$/;"	v
result	nvim/composer-setup.php	/^        $result = file_get_contents($url, false, $context);$/;"	v
result	nvim/composer-setup.php	/^    $result = true;$/;"	v
retries	nvim/composer-setup.php	/^        $retries = 3;$/;"	v
retry	nvim/autoload/plug.vim	/^function! s:retry()$/;"	f
revert	nvim/autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	nvim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	nvim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
run	nvim/composer-setup.php	/^    public function run($version, $installDir, $filename, $channel)$/;"	f
s:TYPE	nvim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	nvim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:cpo_save	nvim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	nvim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	nvim/autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:last_rtp	nvim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	nvim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	nvim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	nvim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	nvim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	nvim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	nvim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	nvim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:save_cpo	nvim/autoload/hudigraphs.vim	/^let s:save_cpo = &cpo$/;"	v
s:triggers	nvim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	nvim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
section	nvim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
setUseAnsi	nvim/composer-setup.php	/^function setUseAnsi($argv)$/;"	f
shellesc	nvim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
shellesc_cmd	nvim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
showSecurityWarning	nvim/composer-setup.php	/^function showSecurityWarning($disableTls)$/;"	f
showWarnings	nvim/composer-setup.php	/^function showWarnings($warnings)$/;"	f
show_digraphs	nvim/autoload/hudigraphs.vim	/^function! s:show_digraphs (digraphs, cursor_char, context)$/;"	f
shown	nvim/composer-setup.php	/^        $shown = array();$/;"	v
sigUrl	nvim/composer-setup.php	/^        $sigUrl = $url.'.sig';$/;"	v
signature	nvim/composer-setup.php	/^                $signature = base64_decode($signature['sha384']);$/;"	v
signature	nvim/composer-setup.php	/^                $signature = json_decode($signature, true);$/;"	v
signature	nvim/composer-setup.php	/^            $signature = $this->httpClient->get($url);$/;"	v
snapshot	nvim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	nvim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	nvim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	nvim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
start	nvim/composer-setup.php	/^    public function start()$/;"	f
status	nvim/autoload/plug.vim	/^function! s:status()$/;"	f
status_load	nvim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	nvim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
stop	nvim/composer-setup.php	/^    public function stop()$/;"	f
styles	nvim/composer-setup.php	/^    $styles = array($/;"	v
suhosin	nvim/composer-setup.php	/^        $suhosin = ini_get('suhosin.executor.include.whitelist');$/;"	v
suhosinBlacklist	nvim/composer-setup.php	/^        $suhosinBlacklist = ini_get('suhosin.executor.include.blacklist');$/;"	v
switch_in	nvim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	nvim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	nvim/autoload/plug.vim	/^function! s:syntax()$/;"	f
system	nvim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	nvim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
target	nvim/composer-setup.php	/^        $target = $path.DIRECTORY_SEPARATOR.$filename;$/;"	v
target	nvim/composer-setup.php	/^        $this->target = $installDir.DIRECTORY_SEPARATOR.$filename;$/;"	v
target	nvim/composer-setup.php	/^    private $target;$/;"	v
test#project_root	nvim/init.vim	/^let test#project_root = "\/home\/sumosudo\/Projects\/MyECommerce\/playlottoinafrica\/application\/tests"$/;"	v
test#strategy	nvim/init.vim	/^let test#strategy = 'asyncrun'$/;"	v
test#strategy	nvim/init.vim	/^let test#strategy = 'dispatch'$/;"	v
tick	nvim/autoload/plug.vim	/^function! s:tick()$/;"	f
tmpFile	nvim/composer-setup.php	/^        $this->tmpFile = $installDir.DIRECTORY_SEPARATOR.basename($this->target, '.phar').'-temp.phar';$/;"	v
tmpFile	nvim/composer-setup.php	/^    private $tmpFile;$/;"	v
to_a	nvim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	nvim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
total_mem	tmux/tmux-mem-cpu-load/common/memory.h	/^  float total_mem;$/;"	m	struct:MemoryStatus
trim	nvim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
uninstall	nvim/composer-setup.php	/^    protected function uninstall()$/;"	f
update	nvim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	nvim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	nvim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	nvim/autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	nvim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	nvim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	nvim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	nvim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
uriScheme	nvim/composer-setup.php	/^        $uriScheme = $this->disableTls ? 'http' : 'https';$/;"	v
url	nvim/composer-setup.php	/^                $url = $this->baseUrl."\/download\/{$version}\/composer.phar";$/;"	v
url	nvim/composer-setup.php	/^                $url = $this->baseUrl.$candidate['path'];$/;"	v
url	nvim/composer-setup.php	/^        $url = $this->baseUrl.'\/versions';$/;"	v
useXdg	nvim/composer-setup.php	/^function useXdg()$/;"	f
used_mem	tmux/tmux-mem-cpu-load/common/memory.h	/^  float used_mem;$/;"	m	struct:MemoryStatus
userDir	nvim/composer-setup.php	/^        $userDir = getUserDir();$/;"	v
userDir	nvim/composer-setup.php	/^    $userDir = getenv($userEnv);$/;"	v
userEnv	nvim/composer-setup.php	/^    $userEnv = defined('PHP_WINDOWS_VERSION_MAJOR') ? 'APPDATA' : 'HOME';$/;"	v
validateCaFile	nvim/composer-setup.php	/^function validateCaFile($contents)$/;"	f
validatePhar	nvim/composer-setup.php	/^    protected function validatePhar($pharFile, &$error)$/;"	f
verifyAndSave	nvim/composer-setup.php	/^    protected function verifyAndSave($version, $signature, &$error)$/;"	f
verifySignature	nvim/composer-setup.php	/^    protected function verifySignature($version, $signature, $file)$/;"	f
version	nvim/composer-setup.php	/^                $version = $candidate['version'];$/;"	v
version	nvim/composer-setup.php	/^    $version    = getOptValue('--version', $argv, false);$/;"	v
version_requirement	nvim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
w!!	nvim/init.vim	/^cnoremap w!! w !sudo tee % >\/dev\/null$/;"	m
warn	nvim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
warnings	nvim/composer-setup.php	/^    $warnings = array();$/;"	v
with_cd	nvim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
write	nvim/composer-setup.php	/^        $write = file_put_contents($target, $data, LOCK_EX);$/;"	v
write_table	tmux/tmux-mem-cpu-load/common/generate-luts.py	/^def write_table(fp, colormap_name, stat_name, first_half_foreground, second_half_foreground):$/;"	f
xdgConfig	nvim/composer-setup.php	/^                    $xdgConfig = $userDir.'\/.config';$/;"	v
